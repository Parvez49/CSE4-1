# -*- coding: utf-8 -*-
"""NaiveByesAss.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QHHcdW5gduMcpYz8Eu0ZmfruWNUz3uLu

""
import numpy as np


class NaiveBayes:
    def fit(self, X, y):
        n_samples, n_features = X.shape
        self._classes = np.unique(y)
        n_classes = len(self._classes)

        # calculate mean, var, and prior for each class
        self._mean = np.zeros((n_classes, n_features), dtype=np.float64)
        self._var = np.zeros((n_classes, n_features), dtype=np.float64)
        self._priors = np.zeros(n_classes, dtype=np.float64)

        for idx, c in enumerate(self._classes):
            X_c = X[y == c]
            self._mean[idx, :] = X_c.mean(axis=0)
            self._var[idx, :] = X_c.var(axis=0)
            self._priors[idx] = X_c.shape[0] / float(n_samples)

    def predict(self, X):
        y_pred = [self._predict(x) for x in X]
        return np.array(y_pred)

    def _predict(self, x):
        posteriors = []

        # calculate posterior probability for each class
        for idx, c in enumerate(self._classes):
            prior = np.log(self._priors[idx])
            posterior = np.sum(np.log(self._pdf(idx, x)))
            posterior = prior + posterior
            posteriors.append(posterior)

        # return class with highest posterior probability
        return self._classes[np.argmax(posteriors)]

    def _pdf(self, class_idx, x):
        mean = self._mean[class_idx]
        var = self._var[class_idx]
        numerator = np.exp(-((x - mean) ** 2) / (2 * var))
        denominator = np.sqrt(2 * np.pi * var)
        return numerator / denominator

# Testing
if __name__ == "__main__":
    # Imports
    from sklearn.model_selection import train_test_split
    from sklearn import datasets

    def accuracy(y_true, y_pred):
        accuracy = np.sum(y_true == y_pred) / len(y_true)
        return accuracy

    X, y = datasets.make_classification(
        n_samples=1000, n_features=10, n_classes=2, random_state=123
    )
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=123
    )

    #print(len(X),len(y))
    nb = NaiveBayes()
    nb.fit(X_train, y_train)
    predictions = nb.predict(X_test)

    print("Naive Bayes classification accuracy", accuracy(y_test, predictions))



# -------------------------------------- checking k-fold cross-validation --------------------------------------------
    #k=5
    k=int(input("Enter the value of k for K-fold cross-validation: "))
    start=0
    end=int(len(X)/k)
    K_fold_accuracy=0


    for i in range(k):
      X_test=list()
      X_train=list()
      y_test=list()
      y_train=list()
      for j in range(len(X)):
        if j>=start and j<end:
          X_test.append(X[j])
          y_test.append(y[j])
        else:
          X_train.append(X[j])
          y_train.append(y[j])

      X_train=np.array(X_train)
      y_train=np.array(y_train)
      X_test=np.array(X_test)
      y_test=np.array(y_test)
      nb.fit(X_train, y_train)
      predictions = nb.predict(X_test)
      K_fold_accuracy+=accuracy(y_test,predictions)
      #print(K_fold_accuracy/k)
      #print(len(X_test),len(X_train))
    print("Naive Bayes classification accuracy for k-fold cross-validation: ",K_fold_accuracy/k)

"""
"""

"""
Implement a naive Bayes classifier
    i. Experiment with a benchmark dataset of your choice.
    ii. Perform a K-fold cross-validation
"""


import numpy as np
class NaiveBayes:
    def fit(self, X, y):
        n_samples, n_features = X.shape #(800,10)
        #print(X.shape)
        self._classes = np.unique(y)
        #print(self._classes) #--> [0 1]
        n_classes = len(self._classes)

        # calculate mean, var, and prior for each class
        self._mean = np.zeros((n_classes, n_features), dtype=np.float64)
        #print(self._mean)
        self._var = np.zeros((n_classes, n_features), dtype=np.float64)
        self._priors = np.zeros(n_classes, dtype=np.float64)

        for idx, c in enumerate(self._classes):
            X_c = X[y == c]
            #print(X_c)
            self._mean[idx, :] = X_c.mean(axis=0)
            #print(self._mean)
            self._var[idx, :] = X_c.var(axis=0)
            self._priors[idx] = X_c.shape[0] / float(n_samples)

    def predict(self, X):
        y_pred = [self._predict(x) for x in X]
        return np.array(y_pred)

    def _predict(self, x):
        posteriors = []

        # calculate posterior probability for each class
        for idx, c in enumerate(self._classes):
            prior = np.log(self._priors[idx])
            posterior = np.sum(np.log(self._pdf(idx, x)))
            posterior = prior + posterior
            posteriors.append(posterior)

        # return class with highest posterior probability
        return self._classes[np.argmax(posteriors)]

    def _pdf(self, class_idx, x):
        mean = self._mean[class_idx]
        var = self._var[class_idx]
        numerator = np.exp(-((x - mean) ** 2) / (2 * var))
        denominator = np.sqrt(2 * np.pi * var)
        return numerator / denominator

# ------------------- checking k-fold cross-validation ---------------
def K_fold_cross_validation(X,y):
    #k=int(input("Enter the value of k for K-fold cross-validation: "))
    k=5
    start=0
    end=int(len(X)/k)
    K_fold_accuracy=0


    for i in range(k):
      X_test=list()
      X_train=list()
      y_test=list()
      y_train=list()
      for j in range(len(X)):
        if j>=start and j<end:
          X_test.append(X[j])
          y_test.append(y[j])
        else:
          X_train.append(X[j])
          y_train.append(y[j])

      X_train=np.array(X_train)
      y_train=np.array(y_train)
      X_test=np.array(X_test)
      y_test=np.array(y_test)

      nb = NaiveBayes()
      nb.fit(X_train, y_train)
      predictions = nb.predict(X_test)
      K_fold_accuracy+=accuracy(y_test,predictions)
    print("accuracy for k-fold cross-validation: ",K_fold_accuracy/k)





# Testing
if __name__ == "__main__":
    # Imports
    from sklearn.model_selection import train_test_split
    from sklearn import datasets

    def accuracy(y_true, y_pred):
        accuracy = np.sum(y_true == y_pred) / len(y_true)
        return accuracy

    X, y = datasets.make_classification(
        n_samples=1000, n_features=10, n_classes=2, random_state=123
    )
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=123
    )

    #print(X_train)
    #print(y_train)
    nb = NaiveBayes()
    nb.fit(X_train, y_train)
    predictions = nb.predict(X_test)


    print("k-fold cross-validation: ")
    K_fold_cross_validation(X,y)