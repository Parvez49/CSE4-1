# -*- coding: utf-8 -*-
"""MultiLayerPerceptron.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H8KgEWg9Y8Ec8DQVVOXLKtBVc6kg4GXh
"""

import  math

def sigmoid(y):
  return 1/(1+math.exp(-1*y))
def weighted_sum(x,w):
  total=0
  for i,j in zip(x,w):
    total+=i*j
  return total
def determine_layer_output(inputs,list_of_weight):
  node_output=[]
  for weights in list_of_weight:
    node_output.append(sigmoid(weighted_sum(inputs,weights)))
  return node_output
def delta_fun(layer2,exp_output):
  k=list()
  for i,j in zip(layer2,exp_output):
    k.append(i*(1-i)*(j-i))
  return k
def delta_fun_hid(delta_out,layer1,w2):
  k=list()
  
  
  for i in range(len(layer1)):
    sum=0
    #for i in range(len(delta_out)):
    for s in delta_out:
      for m in w2[i]:
        sum+=s*m


      #print(delta_out[i],w2[i])
      #sum+=delta_out[i]*w2[0][i]
    k.append(layer1[i]*(1-layer1[i])*sum)
  return k

exp_output=[0.01,0.99]
x=[0.05,0.10,1]
w1=[[0.15,0.20,0.35],[0.25,0.30,0.35]]
w2=[[0.40,0.45,0.60],[0.50,0.55,0.60]]

layer1=determine_layer_output(x,w1)
h=[layer1[0],layer1[1],1]
layer2=determine_layer_output(h,w2)

err=0
for i,j in zip(exp_output,layer2):
  err+=0.5*((i-j)**2)
print(err)
print()

delta_out=delta_fun(layer2,exp_output)
delta_hid=delta_fun_hid(delta_out,layer1,w2)
print(delta_out,delta_hid)

import  math

def sigmoid(y):
  return 1/(1+math.exp(-1*y))
def weighted_sum(x,w):
  total=0
  for i,j in zip(x,w):
    total+=i*j
  return total
def determine_layer_output(inputs,list_of_weight):
  node_output=[]
  for weights in list_of_weight:
    node_output.append(sigmoid(weighted_sum(inputs,weights)))
  return node_output


exp=[0.01,0.99]
x=[0.05,0.10,1]
w1=[[0.15,0.20,0.35],[0.25,0.30,0.35]]
layer1=determine_layer_output(x,w1)
print(determine_layer_output(x,w1))
x2=[layer1[0],layer1[1],1]
w2=[[0.40,0.45,0.60],[0.50,0.55,0.60]]
#w2=[[w5,w6,b2],[w7,w8,b2]]
layer2=determine_layer_output(x2,w2)
#o1,o2=determine_layer_output(x2,w2)
print(determine_layer_output(x2,w2))

"""
err=0
for i,j in zip(exp,layer2):
  err+=0.5*((i-j)**2)
print(err)
"""
#delta=layer2[0]*(1-layer2[0])*(0.01-layer2[0])
#w2[0][0]=w2[0][0]+0.5*delta*layer1[0]
#print(w2[0][0])

delta=[layer2[0]*(1-layer2[0])*(0.01-layer2[0]),layer2[1]*(1-layer2[1])*(0.99-layer2[1])]
#print(delta)

for i in range(len(w2)):
  for j in range(len(w2)):
    if j==2:
      continue
    #delta=layer2[j]*(1-layer2[j])*(0.01-layer2[j])
    w2[i][j]=w2[i][j]+0.5*delta[i]*layer1[j]
#print(w2)
delta2=[layer1[0]*(1-layer1[0])*(.40*delta[0]+0.50*delta[1]),layer1[1]*(1-layer1[1])*(.45*delta[0]+0.55*delta[1])]
print(delta2)

for i in range(len(w1)):
  for j in range(len(w1)):
    if j==2:
      continue
    #delta=layer2[j]*(1-layer2[j])*(0.01-layer2[j])
    w1[i][j]=w1[i][j]+0.5*delta[i]*x[j]
print(w1)