# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WYM0165hqn-g9Ru-wnmkEzHMB3R7vnbr
"""

import math
class Node:
   def __init__(self,process, exp_time, predecessor, sucessor):
      self.process=process
      self.exp_time=exp_time
      self.predecessor=predecessor
      self.sucessor=sucessor
      self.e_start =0
      self.e_finish=0
      self.l_start=0
      self.l_finish=0
      self.slack=-1

node=list()

#activity=list(map(char,input().split()))
#exe_time=list(map(int,input().split()))
#predess=list(map())
#for i in range(activity):
node.append(Node('A',4,[],['B']))
node.append(Node('B',58,['A'],['C','D']))
node.append(Node('C',2,['B'],['E']))
node.append(Node('D',2,['B'],['F']))
node.append(Node('E',1,['C'],[]))
node.append(Node('F',1,['D'],[]))
#print(node[3].e_start)

mn=-1
for i in range(len(node)):
  if len(node[i].predecessor)==0:
    node[i].e_start=0
    node[i].e_finish=node[i].exp_time
  elif len(node[i].predecessor)==1:
    #print("B",node[ord(node[i].predecessor[0])-65].e_finish)
    #print(ord(node[i].predecessor[0])-65)
    node[i].e_start=node[ord(node[i].predecessor[0])-65].e_finish
    node[i].e_finish=node[i].e_start+node[i].exp_time
  if mn<node[i].e_finish:
    mn=node[i].e_finish

print("Earlier start and finish(After forward Calculation): ")
for i in range(len(node)):
    print(node[i].process,node[i].e_start,node[i].e_finish)


for i in range(len(node)-1,-1,-1):
   # print(i)
    if len(node[i].sucessor)==0:
        node[i].l_finish=mn
        node[i].l_start= node[i].l_finish- node[i].exp_time
    elif len(node[i].sucessor)==1:
        node[i].l_finish=node[ord(node[i].sucessor[0])-65].l_start
        node[i].l_start= node[i].l_finish- node[i].exp_time
    elif len(node[i].sucessor)>=2:
        for j in range(len(node[i].sucessor)):
            mx=99999999
            if mx>node[ord(node[i].sucessor[0])-65].l_start:
                mx=node[ord(node[i].sucessor[0])-65].l_start
        #print(mx)
        node[i].l_finish=mx
        node[i].l_start= node[i].l_finish- node[i].exp_time

print("Latest start and finish(After Backward Calculation): ")
    
for i in range(len(node)):
  print(node[i].process,node[i].l_start,node[i].l_finish)


print("Slack value: ")
for i in range(len(node)):
  node[i].slack=node[i].e_start-node[i].l_start
  print(node[i].slack,end=" ")

print()
print("Critical path: ")
for i in range(len(node)):
  if node[i].slack==0:
    print(node[i].process,end=" ")

"""
import math
class Node:
   def __init__(self,process, exp_time, predecessor, sucessor):
      self.process=process
      self.exp_time=exp_time
      self.predecessor=predecessor
      self.sucessor=sucessor
      self.e_start =0
      self.e_finish=0
      self.l_start=0
      self.l_finish=0
      self.slack=-1

node=list()

#activity=list(map(char,input().split()))
#exe_time=list(map(int,input().split()))
#predess=list(map())
#for i in range(activity):
node.append(Node('A',4,[],['B']))
node.append(Node('B',58,['A'],['C','D']))
node.append(Node('C',2,['B'],['E']))
node.append(Node('D',2,['B'],['F']))
node.append(Node('E',1,['C'],[]))
node.append(Node('F',1,['D'],[]))
#print(node[3].e_start)

mn=-1
for i in range(len(node)):
  if len(node[i].predecessor)==0:
    node[i].e_start=0
    node[i].e_finish=node[i].exp_time
  elif len(node[i].predecessor)==1:
    #print("B",node[ord(node[i].predecessor[0])-65].e_finish)
    #print(ord(node[i].predecessor[0])-65)
    node[i].e_start=node[ord(node[i].predecessor[0])-65].e_finish
    node[i].e_finish=node[i].e_start+node[i].exp_time
  if mn<node[i].e_finish:
    mn=node[i].e_finish

print("Earlier start and finish(After forward Calculation): ")
for i in range(len(node)):
    print(node[i].process,node[i].e_start,node[i].e_finish)


for i in range(len(node)-1,-1,-1):
   # print(i)
    if len(node[i].sucessor)==0:
        node[i].l_finish=mn
        node[i].l_start= node[i].l_finish- node[i].exp_time
    elif len(node[i].sucessor)==1:
        node[i].l_finish=node[ord(node[i].sucessor[0])-65].l_start
        node[i].l_start= node[i].l_finish- node[i].exp_time
    elif len(node[i].sucessor)>=2:
        for j in range(len(node[i].sucessor)):
            mx=99999999
            if mx>node[ord(node[i].sucessor[0])-65].l_start:
                mx=node[ord(node[i].sucessor[0])-65].l_start
        #print(mx)
        node[i].l_finish=mx
        node[i].l_start= node[i].l_finish- node[i].exp_time

print("Latest start and finish(After Backward Calculation): ")
    
for i in range(len(node)):
  print(node[i].process,node[i].l_start,node[i].l_finish)


print("Slack value: ")
for i in range(len(node)):
  node[i].slack=node[i].e_start-node[i].l_start
  print(node[i].slack,end=" ")

print()
print("Critical path: ")
for i in range(len(node)):
  if node[i].slack==0:
    print(node[i].process,end=" ")

"""