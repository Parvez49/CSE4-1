# -*- coding: utf-8 -*-
"""AON Network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W6e7J8fdRblLYGNOCPKUQ-A0kAAEJXBf
"""

import math

class Node:
  def __init__(self, process, exp_time, predecessor):
    self.process=process
    self.exp_time=exp_time
    self.predecessor=predecessor
    self.sucessor=set()
    self.e_start =0
    self.e_finish=0
    self.l_start=0
    self.l_finish=0
    self.slack=-1

node=list()

node.append(Node('A',2,{}))
node.append(Node('B',3,{'A'}))
node.append(Node('C',2,{'B'}))
node.append(Node('D',8,{'B'}))
node.append(Node('E',4,{'C','B'}))
node.append(Node('F',2,{'E'}))
node.append(Node('G',4,{'D','F'}))
node.append(Node('H',2,{'G','F'}))

data_cal=dict()
for i in node:
  data_cal[i.process]=0

over_mx=-1
while True:
  for i in range(len(node)):
    if data_cal[node[i].process]==0 and len(node[i].predecessor)==0:
      node[i].e_start=0
      node[i].e_finish=node[i].exp_time
      data_cal[node[i].process]=1
    else:
      mx=-1
      for j in node[i].predecessor:
        if data_cal[j]==1:
          for k in node:
            if k.process==j and mx<k.e_finish:
                mx=k.e_finish
                k.sucessor.add(node[i].process)
        else:
          mx=-1
          break
      if not (mx==-1):
        node[i].e_start=mx
        node[i].e_finish=node[i].e_start+node[i].exp_time
        data_cal[node[i].process]=1
    
    if over_mx<node[i].e_finish:
      over_mx=node[i].e_finish
  if sum(list(data_cal.values()))==len(node):
    break

            
for i in node:
  data_cal[i.process]=0


print("----------------------------Implementation of Critical Path Problem----------------------------------")
print("Earlier start and finish(After forward Calculation): ")
for i in range(len(node)):
  print(node[i].process,node[i].e_start,node[i].e_finish)


while True:
  for i in range(len(node)):
    if data_cal[node[i].process]==0 and len(node[i].sucessor)==0:
      node[i].l_finish=over_mx
      node[i].l_start=node[i].l_finish-node[i].exp_time
      data_cal[node[i].process]=1
    else:
      mn=999999
      
      for j in node[i].sucessor:
        if data_cal[j]==1:
          for k in node:
            if k.process==j and mn>k.l_start:
                mn=k.l_start
        else:
          mn=999999
          break
      if not (mn==999999):
        node[i].l_finish=mn
        node[i].l_start=node[i].l_finish-node[i].exp_time
        data_cal[node[i].process]=1
      
  if sum(list(data_cal.values()))==len(node):
    break


print("Latest start and finish(After Backward Calculation): ")
    
for i in range(len(node)):
  print(node[i].process,node[i].l_start,node[i].l_finish)


print("Slack value: ")
for i in range(len(node)):
  node[i].slack=node[i].e_start-node[i].l_start
  print(node[i].slack,end=" ")

print()
print("Critical path: ")
for i in range(len(node)):
  if node[i].slack==0:
    print(node[i].process,end=" ")